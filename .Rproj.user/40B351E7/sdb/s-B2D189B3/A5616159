{
    "collab_server" : "",
    "contents" : "# create mass fitting curve\n\n###############################\n# Typical usage:\n#\n## load and plot original data\n# proteinGroups_path <- \"/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt\"\n# pg <- load_MQ(proteinGroups_path)\n# plot_MQ(pg)\n\n## apply the various filtering\n# pg_2 <- filter_repeated_entries(pg)\n# plot_MQ(pg_2)\n# pg_3 <- filter_weak_intensity(pg_2)\n# plot_MQ(pg_3)\n# pg_4 <- filter_low_densities(pg_3)\n# plot_MQ(pg_4)\n\n## make the curve fitting and plot the result\n# mass_fit <- fit_curve(pg_4)\n# plot_fit(pg_4, mass_fit)\n# plot_fit(pg, mass_fit)\n\n#' Filter_and_fit\n#'\n#' Filter the data and apply a fit on it.\n#'\n#' @param pg ProteinGroups data.frame.\n#' @examples\n#' proteinGroups_path <- \"/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt\"\n#' pg <- load_MQ(proteinGroups_path)\n#' mass_fit <- filter_and_fit(pg)\n#' plot_fit(pg, mass_fit)\n#' @export\nfilter_and_fit <- function(pg){\n  pg <- filter_repeated_entries(pg)\n  pg <- filter_weak_intensity(pg)\n  pg <- filter_low_densities(pg)\n  fit_curve(pg)\n}\n\n\n#' Fit curve\n#'\n#' Fit a polynomial curve to the given intensity data.\n#'\n#' @param pg MaxQuant ProteinGroup data.\nfit_curve <- function(pg){\n  # get the intensities from the proteinGroups\n  ints <- get_intensities(pg)\n  ints.weight <- cbind(ints, mol.weight = log10(pg$Mol..weight..kDa.))\n  ints.long <- reshape2::melt(ints.weight, id=\"mol.weight\")\n  ints.flt <- ints.long[ints.long$value > 0 & ! is.na(ints.long$value),]\n\n  ints.flt$variable <- as.numeric(ints.flt$variable)\n  y.lm <- lm(data=ints.flt, formula = mol.weight ~ poly(variable,3, raw=TRUE), weight=value)\n\n  y.lm\n}\n\n#' Filter_repeated_entries\n#'\n#' Remove proteins which were found in too many slices. Those are very usually contaminants.\n#'\n#' @param rep_threshold Max percentage of appearance. Default is 0.3.\nfilter_repeated_entries <- function(pg, rep_threshold = 0.3){\n  ints <- get_intensities(pg)\n  nr_slices <- ncol(ints)\n  ints_above_zero <- apply(ints, 1, function(x) length(which(x > 0)))\n  not.contaminant <- ints_above_zero/nr_slices <= rep_threshold\n  pg[not.contaminant,]\n}\n\n\n#' Filter_low_densities\n#'\n#' Remove entries in regions with low density.\n#'\n#' @param min_nr_threshold Min number of entries which should be found in a slice. Default is 10.\n#' @param step_nr Number of steps for the theoretical mass. Default is 100.\nfilter_low_densities <- function(pg, min_nr_threshold = 10, step_nr = 500){\n\n  # get the slices\n  slices <- get_slice_numbers(colnames(pg))\n\n  # get the mol_weight range\n  mol_weight <- pg$Mol..weight..kDa.\n  min_mass <- min(mol_weight)\n  max_mass <- max(mol_weight)\n  step_size <- (max_mass - min_mass) / step_nr\n\n  # get the intensities\n  ints <- get_intensities(pg)\n\n  # loop in slices\n  for(slice in slices){\n    lower_mass <- min_mass\n\n    for(i_mass in 1:step_nr){\n      higher_mass <- lower_mass + step_size\n\n      # select points\n      selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)\n      selected_ints <- ints[selected_masses, slice]\n\n      # if it doesnt pass the threshold, we remove the points\n      if(sum(selected_ints > 0) < min_nr_threshold){\n        ints[selected_masses, slice] <- NA\n      }\n\n      lower_mass <- higher_mass\n    }\n\n  }\n\n  col_ids <- grep(int_column_pattern, colnames(pg))\n  pg[, col_ids] <- ints\n  pg\n\n}\n\n\n#' Filter weak intensitites\n#'\n#' Remove entries with a weak intensity.\n#'\n#' @param rep_threshold Max percentage of appearance. Default is 0.3.\nfilter_weak_intensity <- function(pg, int_threshold_percent = 0.5){\n  # work with a logarithmic scale\n  ints <- get_intensities(pg)\n  ints[ints == 0] <- NA\n  ints <- log(ints)\n\n  # calculate the intensity threshold\n  max_int <- max(ints, na.rm = TRUE)\n  min_int <- min(ints, na.rm = TRUE)\n  int_span <- max_int - min_int\n  int_threshold <- min_int + int_span * int_threshold_percent\n\n  # remove too weak points from pg\n  too_weak <- ints < int_threshold\n  col_ids <- grep(int_column_pattern, colnames(pg))\n  pg[, col_ids][too_weak] <- 0\n  pg\n}\n\n\n",
    "created" : 1526392421883.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "374139537",
    "id" : "A5616159",
    "lastKnownWriteTime" : 1526451925,
    "last_content_update" : 1526451925813,
    "path" : "~/Work/PAF/projects/pumba/code/pumbaR/R/mass-fit-curve.R",
    "project_path" : "R/mass-fit-curve.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}