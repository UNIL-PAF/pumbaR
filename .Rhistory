max(x, na.rm=TRUE)
max(x, na.rm=TRUE) < int_threshold
int_threshold
max_int - min_int
(max_int - min_int) * int_threshold_percent
(max_int - min_int) * int_threshold_percent/2
ints <- log(ints)
min_int <- min(ints, na.rm = TRUE)
max_int <- max(ints, na.rm = TRUE)
min_int
max_int
int_threshold <- min_int + (max_int - min_int) * int_threshold_percent
too_weak <- apply(ints, 1, function(x) max(x, na.rm=TRUE) < int_threshold)
summary(too_weak)
int_threshold_percent <- 0.3
int_threshold <- min_int + (max_int - min_int) * int_threshold_percent
too_weak <- apply(ints, 1, function(x) max(x, na.rm=TRUE) < int_threshold)
summary(too_weak)
devtools::load_all(".")
pg_2 <- filter_weak_intensity(pg)
plot_MQ(pg_2)
head(pg_2)
a <- pg[! too_weak,]
a
head(a)
summary(a)
dim(a)
dim(pg)
plot_MQ(a)
pg_2 <- filter_weak_intensity(pg, int_threshold_percent=0.5)
devtools::load_all(".")
pg_2 <- filter_weak_intensity(pg, int_threshold_percent=0.5)
devtools::load_all(".")
pg_2 <- filter_weak_intensity(pg, int_threshold_percent=0.5)
pg_2 <- filter_weak_intensity(pg)
plot_MQ(pg_2)
get_intensities(pg_2)
grep("Intensity\\.H\\.", colnames(pg_2))
colnames(pg_2)
head(pg_2)
devtools::load_all(".")
filter_weak_intensity(pg, 0.1)
ints <- get_intensities(pg)
max_int <- max(ints)
max_int
ints[ints == 0] <- NA
ints <- log(ints)
head(ints)
max_int <- max(ints, na.rm = TRUE)
max_int
min_int <- min(ints, na.rm = TRUE)
min_int
int_span <- max_int - min_int
int_threshold <- min_int + int_span * int_threshold_percent
int_threshold
too_weak <- apply(ints, 1, function(x) max(x, na.rm=TRUE) < int_threshold)
head(too_weak)
summary(too_weak)
head(ints)
ints[ints == 0] <- NA
col_names_flt <- grep(int_col_pattern, col_names, value=TRUE)
int_col_pattern <- "Intensity\\.H\\."
int_column_pattern <- "Intensity\\.H\\."
head(get_intensities(pg))
devtools::load_all(".")
head(get_intensities(pg))
head(get_slice_numbers(colnames(pg)))
colnames(pg)
get_slice_numbers(colnames(pg))
devtools::load_all(".")
get_slice_numbers(colnames(pg))
ints <- get_intensities(pg)
head(ints)
ints[ints == 0] <- NA
ints <- log(ints)
max_int <- max(ints, na.rm = TRUE)
min_int <- min(ints, na.rm = TRUE)
int_span <- max_int - min_int
int_threshold <- min_int + int_span * int_threshold_percent
too_weak <- ints < int_threshold
head(too_weak)
summary(too_weak)
pg[, col_ids][too_weak] <- NA
too_weak <- ints < int_threshold
col_ids <- grep(int_column_pattern, colnames(pg))
pg[, col_ids][too_weak] <- NA
head(pg)
plot_MQ(pg)
pg <- load_MQ(proteinGroups_path)
plot_MQ(pg)
devtools::load_all(".")
proteinGroups_path <- "/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt"
pg <- load_MQ(proteinGroups_path)
pg_2 <- filter_low_densities(pg)
pg_2 <- filter_weak_intensity(pg)
devtools::load_all(".")
pg_2 <- filter_weak_intensity(pg)
devtools::load_all(".")
pg_2 <- filter_weak_intensity(pg)
devtools::load_all(".")
pg_2 <- filter_weak_intensity(pg)
plot_MQ(pg_2)
pg_2 <- filter_repeated_entries(pg)
plot_MQ(pg)
plot_MQ(pg_2)
pg_3 <- filter_weak_intensity(pg_2)
plot_MQ(pg_3)
min_nr_threshold <- 10
slices <- get_slice_numbers(colnames(pg))
step.nr <- 100
step_nr <- 100
slice <- slices[1]
slice
min_mass <- min(slices)
max_mass <- max(slices)
lower_mass <- min_mass
i_mass <- 1
step_size <- 1 / step_nr
higher_mass <- lower_mass + step_size
lower_mass
higher_mass
colnmames(pg)
colnames(pg)
mol.weight <- pg$Mol..weight..kDa.
mol_weight <- pg$Mol..weight..kDa.
max_mass <- max(mol_weight)
step_size <- (max_mass - min_mass) / step_nr
selected.masses <- which(mol_weight >= lower.mass & mol_weight < higher.mass)
selected.masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected.masses
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected.masses
# get the slices
slices <- get_slice_numbers(colnames(pg))
# get the mol_weight range
mol_weight <- pg$Mol..weight..kDa.
min_mass <- min(mol_weight)
max_mass <- max(mol_weight)
step_size <- (max_mass - min_mass) / step_nr
# get the intensities
ints <- get_intensities(pg)
lower_mass <- min_mass
i_mass
higher_mass <- lower_mass + step_size
higher_mass
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
selected_ints
length(sum(selected_ints > 0))
min_nr_threshold
devtools::load_all(".")
pg_4 <- filter_low_densities(pg_3)
plot_MQ(pg_4)
pg <- pg_3
# get the slices
slices <- get_slice_numbers(colnames(pg))
# get the mol_weight range
mol_weight <- pg$Mol..weight..kDa.
min_mass <- min(mol_weight)
max_mass <- max(mol_weight)
step_size <- (max_mass - min_mass) / step_nr
ints <- get_intensities(pg)
head(ints)
# loop in slices
for(slice in slices){
lower_mass <- min_mass
for(i_mass in 1:step_nr){
higher_mass <- lower_mass + step_size
# select points
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
# if it doesnt pass the threshold, we remove the points
if(length(sum(selected_ints > 0)) < min_nr_threshold){
ints[selected_masses, slice] <- NA
}
lower_mass <- higher_mass
}
}
head(ints)
summary(ints)
# get the intensities
ints <- get_intensities(pg)
# loop in slices
for(slice in slices){
lower_mass <- min_mass
for(i_mass in 1:step_nr){
higher_mass <- lower_mass + step_size
# select points
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
print(length(sum(selected_ints > 0)))
# if it doesnt pass the threshold, we remove the points
if(length(sum(selected_ints > 0)) < min_nr_threshold){
ints[selected_masses, slice] <- NA
}
lower_mass <- higher_mass
}
}
# get the intensities
ints <- get_intensities(pg)
# loop in slices
for(slice in slices){
lower_mass <- min_mass
for(i_mass in 1:step_nr){
higher_mass <- lower_mass + step_size
# select points
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
print(selected_masses)
print(selected_ints)
print(length(sum(selected_ints > 0)))
# if it doesnt pass the threshold, we remove the points
if(length(sum(selected_ints > 0)) < min_nr_threshold){
ints[selected_masses, slice] <- NA
}
lower_mass <- higher_mass
}
}
# get the intensities
ints <- get_intensities(pg)
# loop in slices
for(slice in slices){
lower_mass <- min_mass
for(i_mass in 1:step_nr){
higher_mass <- lower_mass + step_size
# select points
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
print(selected_masses)
print(selected_ints)
print(length(sum(selected_ints > 0)))
# if it doesnt pass the threshold, we remove the points
if(length(sum(selected_ints > 0)) < min_nr_threshold){
ints[selected_masses, slice] <- NA
}
lower_mass <- higher_mass
}
}
selected_masses
devtools::load_all(".")
# get the intensities
ints <- get_intensities(pg)
# loop in slices
for(slice in slices){
lower_mass <- min_mass
for(i_mass in 1:step_nr){
higher_mass <- lower_mass + step_size
# select points
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
print(length(selected_masses))
#print(selected_ints)
#print(length(sum(selected_ints > 0)))
# if it doesnt pass the threshold, we remove the points
if(length(sum(selected_ints > 0)) < min_nr_threshold){
ints[selected_masses, slice] <- NA
}
lower_mass <- higher_mass
}
}
# get the intensities
ints <- get_intensities(pg)
# loop in slices
for(slice in slices){
lower_mass <- min_mass
for(i_mass in 1:step_nr){
higher_mass <- lower_mass + step_size
# select points
selected_masses <- which(mol_weight >= lower_mass & mol_weight < higher_mass)
selected_ints <- ints[selected_masses, slice]
print(length(selected_masses))
if(length(selected_masses) > 1) print(selected_ints)
#print(length(sum(selected_ints > 0)))
# if it doesnt pass the threshold, we remove the points
if(length(sum(selected_ints > 0)) < min_nr_threshold){
ints[selected_masses, slice] <- NA
}
lower_mass <- higher_mass
}
}
devtools::load_all(".")
pg_4 <- filter_low_densities(pg_3)
plot_MQ(pg_4)
pg_4 <- filter_low_densities(pg_3, 10, 500)
plot_MQ(pg_4)
devtools::load_all(".")
proteinGroups_path <- "/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt"
pg <- load_MQ(proteinGroups_path)
proteinGroups_path <- "/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt"
plot_MQ(pg)
pg_2 <- filter_repeated_entries(pg)
plot_MQ(pg_2)
pg_3 <- filter_weak_intensity(pg_2)
plot_MQ(pg_3)
pg_4 <- filter_low_densities(pg_3)
plot_MQ(pg_4)
colnames(pg_4)
pg <- pg_4
ints <- get_intensities(pg)
ints.weight <- cbind(ints, mol.weight = log10(pg$Mol..weight..kDa.))
ints.long <- reshape2::melt(ints.weight, id="mol.weight")
ints.flt <- ints.long[ints.long$value > 0,]
max.ints <- max(ints.flt$value)
min.ints <- min(ints.flt$value)
summary(ints.flt)
colnames(ints)
ints.flt <- ints.long[ints.long$value > 0 & ! is.na(ints.long$value),]
max.ints <- max(ints.flt$value)
min.ints <- min(ints.flt$value)
summary(ints.flt)
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p  + ggplot2::xlab("slice number") + ggplot2::ylab("theoretical MW (log)")
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
ints.flt$variable <- as.numeric(ints.flt$variable)
summary(ints.flt)
y.lm <- lm(data=ints.flt, formula = mol.weight ~ poly(variable,3, raw=TRUE), weight=value)
devtools::load_all(".")
fit_curve(pg_4)
plot(fit_curve(pg_4))
nr_slices <- ncol(ints)
nr_slices <- ncol(ints)
plot_fit_data <- data.frame(slice=1:nr_slices, mass=unlist(lapply(1:nr_slices, mass_fit)))
mass_fit <- fit_curve(pg_4)
plot_fit_function <- function(x){
y <- predict(mass_fit, data.frame(variable=x))
return(y[[1]])
}
# prepare the data for the fitting function
nr_slices <- ncol(ints)
plot_fit_data <- data.frame(slice=1:nr_slices, mass=unlist(lapply(1:nr_slices, mass_fit)))
mass_fit
plot_fit_data <- data.frame(slice=1:nr_slices, mass=unlist(lapply(1:nr_slices, plot_fit_function)))
head(plot_fit_data)
# create a ggplot
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p  + ggplot2::xlab("slice number") + ggplot2::ylab("theoretical MW (log)")
p <- p + geom_line(data=plot.fit.data, aes(x=slice, y=mass), color="red", size=1.5)
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
# create a ggplot
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p  + ggplot2::xlab("slice number") + ggplot2::ylab("theoretical MW (log)")
p <- p + ggplot2::geom_line(data=plot.fit.data, ggplot2::aes(x=slice, y=mass), color="red", size=1.5)
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
# create a ggplot
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p  + ggplot2::xlab("slice number") + ggplot2::ylab("theoretical MW (log)")
p <- p + ggplot2::geom_line(data=plot_fit_data, ggplot2::aes(x=slice, y=mass), color="red", size=1.5)
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
devtools::load_all(".")
plot_fit(pg <- load_MQ(proteinGroups_path))
pg <- load_MQ(proteinGroups_path)
plot_fit(pg_4, mass_fit)
plot_fit(pg, mass_fit)
plot_fit(pg_4, mass_fit)
proteinGroups_path <- "/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt"
devtools::load_all(".")
pg <- load_MQ(proteinGroups_path)
plot_MQ(pg)
pg_2 <- filter_repeated_entries(pg)
plot_MQ(pg_2)
pg_3 <- filter_weak_intensity(pg_2)
plot_MQ(pg_3)
pg_4 <- filter_low_densities(pg_3)
plot_MQ(pg_4)
mass_fit <- fit_curve(pg_4)
plot_fit(pg_4, mass_fit)
plot_fit(pg, mass_fit)
plot_fit(pg_3, mass_fit)
plot_fit(pg_2, mass_fit)
pg <- pg_4
ints <- get_intensities(pg)
ints.weight <- cbind(ints, mol.weight = log10(pg$Mol..weight..kDa.))
ints.long <- reshape2::melt(ints.weight, id="mol.weight")
ints.flt <- ints.long[ints.long$value > 0 & ! is.na(ints.long$value),]
max.ints <- max(ints.flt$value)
min.ints <- min(ints.flt$value)
head(ints.flt)
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p + ggplot2::scale_x_continuous(limits=c(1:nr_slices))
p <- p  + ggplot2::xlab("slice number")
p <- p  + ggplot2::ylab("theoretical MW (log)")
p <- p + ggplot2::geom_line(data=plot_fit_data, ggplot2::aes(x=slice, y=mass), color="red", size=1.5)
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
nr_slices <- ncol(ints)
plot_fit_data <- data.frame(slice=1:nr_slices, mass=unlist(lapply(1:nr_slices, plot_fit_function)))
# get the intensities from the proteinGroups
ints <- get_intensities(pg)
ints.weight <- cbind(ints, mol.weight = log10(pg$Mol..weight..kDa.))
ints.long <- reshape2::melt(ints.weight, id="mol.weight")
ints.flt <- ints.long[ints.long$value > 0 & ! is.na(ints.long$value),]
max.ints <- max(ints.flt$value)
min.ints <- min(ints.flt$value)
# the data to show the fitting curve
plot_fit_function <- function(x){
y <- predict(mass_fit, data.frame(variable=x))
return(y[[1]])
}
# prepare the data for the fitting function
nr_slices <- ncol(ints)
plot_fit_data <- data.frame(slice=1:nr_slices, mass=unlist(lapply(1:nr_slices, plot_fit_function)))
# create a ggplot
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p + ggplot2::scale_x_continuous(limits=c(1:nr_slices))
p <- p  + ggplot2::xlab("slice number")
p <- p  + ggplot2::ylab("theoretical MW (log)")
p <- p + ggplot2::geom_line(data=plot_fit_data, ggplot2::aes(x=slice, y=mass), color="red", size=1.5)
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
# get the intensities from the proteinGroups
ints <- get_intensities(pg)
ints.weight <- cbind(ints, mol.weight = log10(pg$Mol..weight..kDa.))
ints.long <- reshape2::melt(ints.weight, id="mol.weight")
ints.flt <- ints.long[ints.long$value > 0 & ! is.na(ints.long$value),]
max.ints <- max(ints.flt$value)
min.ints <- min(ints.flt$value)
# the data to show the fitting curve
plot_fit_function <- function(x){
y <- predict(mass_fit, data.frame(variable=x))
return(y[[1]])
}
# prepare the data for the fitting function
nr_slices <- ncol(ints)
plot_fit_data <- data.frame(slice=1:nr_slices, mass=unlist(lapply(1:nr_slices, plot_fit_function)))
# create a ggplot
p <- ggplot2::ggplot(data=ints.flt, ggplot2::aes(x=variable, y=mol.weight, colour=value))
p <- p  + ggplot2::geom_point(position="jitter", alpha=0.5)
p <- p  + ggplot2::scale_colour_gradient2("Intensity (log)", trans="log", limits=c(min.ints, max.ints))
p <- p + ggplot2::scale_x_discrete(limits=c(1:nr_slices))
p <- p  + ggplot2::xlab("slice number")
p <- p  + ggplot2::ylab("theoretical MW (log)")
p <- p + ggplot2::geom_line(data=plot_fit_data, ggplot2::aes(x=slice, y=mass), color="red", size=1.5)
#p <- p  + coord_cartesian(xlim = c(1, nr.slices))
#+ scale_y_continuous(limits=xlim.mass)
p
devtools::load_all(".")
plot_fit(pg_4, mass_fit)
devtools::load_all(".")
filter_and_fit(pg)
devtools::load_all(".")
devtools::document()
?filter_weak_intensity
proteinGroups_path <- "tests/testthat/Conde_9508_sub.txt"
pg <- load_MQ(proteinGroups_path)
dim(pg)
pg_flt <- filter_weak_intensity(pg)
dim(pg_flt)
ints <- get_intensities(pg)
ints[ints == 0] <- NA
ints <- log(ints)
max_int <- max(ints, na.rm = TRUE)
min_int <- min(ints, na.rm = TRUE)
int_span <- max_int - min_int
int_threshold <- min_int + int_span * int_threshold_percent
int_threshold_percent <- 0.5
int_threshold <- min_int + int_span * int_threshold_percent
int_threshold
min_int
max_int
too_weak <- ints < int_threshold
sum(pg == 0)
sum(pg_flt == 0)
dim(pg)
pg_flt <- filter_weak_intensity(pg, 0.8)
sum(pg_flt == 0)
plot_MQ(pg_flt_2)
plot_MQ(pg_flt)
pg_flt_2 <- filter_low_densities(pg_flt, 2)
dim(pg_flt_2)
plot_MQ(pg_flt_2)
sum(pg_flt == 0)
sum(pg_flt_2 == 0)
summary(pg_flt_2)
sum(pg_flt_2 == 0, na.rm = TRUE)
mass_fit <- fit_curve(pg)
mass_fit
mass_fit$coefficients
mass_fit$coefficients[0]
mass_fit$coefficients
mass_fit$coefficients[[1]]
mass_fit$coefficients[1]
mass_fit$coefficients[[1]]
library('pumbaR')
?filter_and_fit
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
proteinGroups_path <- "/Users/admin/Work/PAF/projects/SliceSILAC/latest/data/Conde_9508/proteinGroups.txt"
pg <- load_MQ(proteinGroups_path)
proteinGroups_path <- "tests/testthat/Conde_9508_sub.txt"
pg <- load_MQ(proteinGroups_path)
